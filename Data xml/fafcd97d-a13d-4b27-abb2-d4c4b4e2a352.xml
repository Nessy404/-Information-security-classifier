<doc><category auto="true" type="str" verify="true"><![CDATA[Информационная безопасность]]></category><author auto="true" type="str" verify="true"><![CDATA[ne555]]></author><title auto="true" type="str" verify="true"><![CDATA[[PixelKnot] 0day-уязвимость в области стеганографии]]></title><keywords auto="true" type="list" verify="true"><item type="str"><![CDATA[Информационная безопасность]]></item><item type="str"><![CDATA[Аналитика мобильных приложений]]></item></keywords><text auto="true" type="str" verify="true"><![CDATA[ Пролог Вербализацию статьи начну с высказывания от одного отечественного «киберпанка», который продемонстрировал «0day-уязвимость в Virtualbox». «Причина заключается в несогласии с текущими реалиями в информационной безопасности, точнее, в направлении security research и bug bounty. Считается нормальным ждать патча для уязвимостей по полгода, если только эти баги уже не в публичном доступе. В области bug bounty-программ считается нормальным: Ждать больше месяца, пока уязвимость не будет проверена и не будет озвучено решение о её приобретении. На ходу менять решение о том, будет ли программа покупать баги для данного софта. Сегодня вы узнали, что да, купят, а через неделю приходите с багами и эксплоитами и получаете ответ, что нет, не купят. Не иметь чёткого списка приложений, за баги в котором будут платить. Да, удобно организаторам bug bounty, нет, неудобно исследователям. Не иметь чётко заданных верхних и нижних границ цен за уязвимости. Факторов, влияющих на цену, чрезвычайно много, но исследователи должны видеть, на что стоит тратить своё время, а что не стоит и дня работы. Мания величия и маркетинговая чушь: давать названия уязвимостям и создавать для них сайты; проводить тысячу конференций в год; преувеличивать важность своей работы; считать себя «спасителем мира». Спуститесь на землю, Ваше высочество.» ...................MorteNoir Солидарен с исследователем. Тема публикации — стеганография Стеганография — способ передачи или хранения информации с учётом сохранения в тайне самого факта такой передачи (Википедия) , проще говоря, стеганография — сокрытие наличия/существования самого тайного послания без привлечения лишнего внимания. В конце прошлого года я обнаружил уязвимость в области стеганографии: в приложении на Android «PixelKnoot». Приложение «PixelKnoot» — это разработка спасителей мира The Guardian Project — популярная контора с мировым именем в области параноидальных мобильных разработок . Orbot/Orweb/Orfox и пр — разработка их рук дело. Ребята из «звёздной команды» Guardianproject описали свое приложение в GP, как «★ НЕВИДИМЫЕ ПЕРЕМЕНЫ: Даже опытный аналитик не должен быть в состоянии обнаружить любое сообщение. Байты изображение должно казаться неискаженным.» на оф.сайте так ATTACK RESISTANT: We’ve tested discovery on images with messages hidden in them using a specialized version of stegdetect, an automated tool for detecting steganographic content in images. Это не совсем так – «маркетинговая чушь!». Я провёл Стегоанализ и нашёл способ: определять — существует ли наличие самого тайного послания в картинке или нет, закодированное с помощью PixelKnot. Время на анализ данных: на разбор таких альбомов-картинок, где тайна, а где её нет, уходит на «слабой машине» ~ 1с/1картинку. Обратился в техподдержку The Guardian Project со своими «мыслями» по поводу того, что все не так гладко с технической точки зрения, как заявлено у них в описании PixelKnot в GP и на оф.сайте. А эти ребята, как и политики — любят скуку: ни программы bug bounty, ни своевременной обратной связи. Получил несколько «медленных ответов» с просьбой не раскрывать детали уязвимости для общественности, а в теле одного из писем такое пожелание от самих «спасителей мира The Guardian Project »: опубликовать проблему PixelKnot на Github-e. Хм… ммм… вот такие мысленные звуки. Противоречивая какая-то логика: «не раскрывать 0day-уязвимость для общественности, но опубликовать её на Github-е». При этом «они» не обновляли PixelKnot почти два года (PixelKnot v1.0.1 от 17/02/2017г., кол-во загрузок из GP > 100к.) . Представляете, что такое промежуток два года в ИБ в эпоху цифры? В теле письма имелись ссылки на open source и пд. (одна из таких совестных ) . Конечно же за репорт или «предложение — подтвердить уязвимость/оплатить» связываться с тобой никто не собирается. Может с однобокой стороны это и смотрится довольно праведно, только вот как быть с «проблемой»?, которая затрагивает «всех» праведных и неправедных без разбора, пожалуй решать не «им». Мне, как и MorteNoir-у (если я правильно понял его посыл...) , подобная политика не всегда нравится, даже несмотря на то, что проекты The Guardian — это Open Source Project-ы. «Рассердило» меня не то, что «Боги» оказались уязвимы, а тот факт, что на письма они отвечают очень неохотно ~ «rms» письмо раз в месяц. Отступление о $ В статье затрону и отечественную контору: Superjob. Коммерческая фирма, которая знает о баге в своём Android-приложении с осени прошлого года и не может его исправить, стыд ИМХО). Провел параллель между двумя компаниями, потому что в обоих случаях за баг-репорт (если подтвердят уязвимость/баг) запросил смешную сумму — $10. Superjob долго тупил и не понимал, в каком месте у них там проблема (хотя я грамотно описал проблему «на словах» в контексте писем для техподдержки), как только предложил «заснять баг на видео за 10$», фирма сразу дала заднюю. Техподдержка тут же подтвердила проблему на своей стороне и сказала «спасибо», но конечно же никакого $ я не заслужил. Superjob-скому багу я не хочу уделять много внимания в этой статье, приведу ответы писем техподдержки «Здравствуйте, ne555! Спасибо за Ваше обращение в службу поддержки сайта Superjob.ru. ne555, вижу, что приложение по моей рекомендации не обновили. Обновите его, пожалуйста. Также пришлите скриншоты экрана, как у Вас выглядит момент с невозможностью прокрутки и переходом колонки на доп. сведения. Постараемся разобраться.» «Здравствуйте, ne555! Спасибо за Ваше обращение в службу поддержки сайта Superjob.ru. ne555, большое спасибо за информацию! Вопрос передали разработчикам, постараемся исправить данный нюанс в следующих версиях приложения. «Здравствуйте, ne555! Спасибо за Ваше обращение в службу поддержки сайта Superjob.ru. ne555, да, мы точно понимаем, где на данный момент у нас недоработка в приложении и этот вопрос еще в работе у разработчиков. Ожидаем устранение в следующих версиях.» Баг так и не устранили с прошлой осени в следующих версиях приложения.. . К примеру, софт для подражания — ПО Veracrypt. Бесплатный софт с открытыми исходниками, но недавно ребята предложили свою bug bounty программу (после обнаружения «серьёзной ошибки» в своем коде) , вопросов этической морали – не имею (по поводу раскрывать/не раскрывать детали для общественности) . Изначально и гласно, я немного затронул проблему стеганографии PixelKnot в одной из своих работ: «Мобильная лаборатория на Android для тестирования на проникновение», конечно же на проблему мало кто обратил внимание. Позже я придумал, организовал конкурс и приурочил его к проблеме в стеганографии: PixelKnot. Аналогично, метрика показывает невысокую популярность, но этим шагом сильнее пробудил интерес общественности к проблеме в стеганографии. Теперь я публикую уязвимость по PixelKnot в СМИ на Хабре, о чём собственно и пойдет «речь» ниже. ()day-уязвимость в PixelKnot С помощью Android-приложения PixelKnot спрятал тайное послание в картинке. Обработанная картинка, как картинка, на глаз — в ней ничего не изменилось, и MAT/2 никаких аспектов метаданных обработанного фото не выявил. Сравнил бинарно с оригиналом — ничего «такого», кроме обработки формата JPEG. Сброшенный файл на ПК, посмотрел разным программами на GNU/Linux/Windows 7: GIMP-ом/Photoshop-ом и стандартными прогами ОС для просмотра и редактирования изображения — ничего. Пропустил оригинал фото через стеганографию Steghide/Stegosuite и сравнил все экземпляры в binwalk (GNU/Linux) — есть зацепка. Картинка Оригинал и картинки, обработанные в Steghide и Stegosuite, определились по исполняемому коду, а картинка PixelKnot — нет (проверил еще десяток картинок, обработанных в PixelKnot, — ни одна «не прошла» binwalk, но этого недостаточно...) . Картинка, обработанная в PixelKnot, — binwalk don't define. Попробовал брутфос атаку Stegcracker — ничего (SC — брутит фото, обработанные только в Steghide) Провёл брутфос атаку Stegbreak — ничего (инструмент очень древний, брутит, но не понимает стеганографию PixelKnot/Steghide/Stegosuite). Задействовал лёгкую пехоту: модифицированный инструмент 15-и летней давности — Stegdetect Из результатов анализа вижу, что из 5 фото, обработанных в PixelKnot, две фото успешно обфусцировали инструмент, а также одна картинка, обработанная в Steghide, проскользнула незамеченной. Подёргал коэф. яркости и компоненты цветности изображения (так как вся информация об изображении для глаза, в том числе секрет, содержится либо в коэф., либо в компонентах) . Эмпирично кое-что выделяется: явные артефакты в «голубом цвете» в картинке PixelKnot , но это анализ фото вручную, при автоматическом стегоанализе, например фотоальбомов, так «лихо» нужные коэф/копм. яркости и цветности для выявления хаотичной пикселизации не подобрать. фрагмент исследуемого фото, обработанного в PixelKnot. Тогда я реализовал, пришедшую на ум, совершенно случайную вещь: переименовал файл, откинув расширение картинки (.jpg/.png. PixelKnot.jpg > PixelKnot) . Открывал файл картинки без расширения с помощью KDE/Mate/Windows/Android стандартными просмотрщиками изображений — ничего, но в Photoshop-е она не открылась — ошибка! Думаю, вот он, нашёл «Cibola»! Но нет, Photoshop сердится и не открывает фото без расширения (.jpg/...) и у обычных фотографий. Продолжил стегоанализ, открыл картинку без расширения в GIMP-е и получил аналогичную ошибку, как и в Photoshop-е. Но! GIMP в отличие от Photoshop-а обычные картинки с откинутым расширением открывает! То есть GIMP «стопорится» на изображениях, обработанных в PixelKnot (при условии, что у обработанного в PixelKnot файла, откинуто расширение, иначе всё хорошо/открывается) . Провёл ещё ряд разных и подобных экспериментов/манипуляций с «тайными посланиями в картинках» в Stegosuite (GUI) и Steghide (CLI) . Эти «друзья» не подвели. В фотоальбоме картинку с тайным посланием не всегда возможно было вычислить (не имея оригинала) , то есть проблема «вскрытия факта о наличии тайного послания в картинке» оставалась только у PixelKnot. А как же проводить Стегоанализ PixelKnot, если картинок десятки и сотни с разным расширением и тд (как искать «ту единственную в стоге сена») ? Раскачиваю найденную уязвимость: действенный способ стегоанализа фотографий обработанных в PixelKnot на GNU/Linux. 1) Открываю Double Commander > групповое переименование файлов > выбираю фотоальбом > откидываю расширение файлов (.jpg/.png/...) это почти мгновенная операция над файлами. 2) Открываю GIMP > файл > открыть как слои > выбираю любой фотоальбом с предварительно откинутыми расширениями фоток. Жду. Если среди картинок попадутся обработанные фото в PixelKnot, то ПО GIMP выдаст, по завершению обработки всех файлов, имена всех фотографий, которые содержат в себе наличие тайного послания. На разбор таких фото уходит ~1с/1 картинку (это на Intel 2х CPU прошлого десятилетия). Эпилог Согласно стеганографическому алгоритму F5, который использует The Guardian Project, PixelKnot скрывает тайное послание в теле картинки ( не в имени и не в метаданных ), например, если картинка будет содержать одно слово на однородном фоне, этого будет недостаточно для обработки фото в PixelKnot. При нескольких словах на однородном фоне, обработка фото PixelKnot будет успешной, но так же будет и видна невооруженным глазом. Пример Система считается взломанной, если аналитику удалось доказать хотя бы наличие скрытого сообщения ( задача выполнена успешно ). Других технических претензий к PixelKnot не имею, на свободных Android-прошивках Resurrection Remix или LineageOS — софт PixelKnot работает без каких-либо сбоев, однако, из-за продемонстрированной уязвимости, приложение PixelKnot полностью теряет свой смысл. UPD Нашёл на просторах сети t.me/HNewsChat/314503 Статья не будет удалена автором с портала ни при каких обстоятельствах.]]></text></doc>