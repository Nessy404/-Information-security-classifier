<doc><category auto="true" type="str" verify="true"><![CDATA[Информационная безопасность]]></category><author auto="true" type="str" verify="true"><![CDATA[Yuvasee]]></author><title auto="true" type="str" verify="true"><![CDATA[Гид по владению аккаунтами и контрактами в Ethereum]]></title><keywords auto="true" type="list" verify="true"><item type="str"><![CDATA[Децентрализованные сети]]></item><item type="str"><![CDATA[Информационная безопасность]]></item><item type="str"><![CDATA[Криптография]]></item><item type="str"><![CDATA[Блог компании MixBytes]]></item><item type="str"><![CDATA[Криптовалюты]]></item></keywords><text auto="true" type="str" verify="true"><![CDATA[ Материал, который мы решили сегодня опубликовать, родился уже около 6 месяцев назад и до сих пор не потерял своей актуальности (может быть, пришлось его чуть-чуть освежить). Тогда мы еще были способны удивляться, глядя на бизнесменов и стартаперов, намеревающихся проводить ICO, но при этом не способных сделать транзакцию с переводом одной эфирки. Сегодня мы уже перестали удивляться, но таких персонажей не стало сильно меньше. Вообще, понимание важности безопасного хранения своих секретных ключей и умение это делать — основа децентрализованной экономики, которая, как мы надеемся, скоро существенно потеснит классическую централизованную модель. Нужно чётко понимать, что как только вы передаете управление своим секретным ключом кому-либо — например банку, бирже, государству — так сразу магия децентрализации пропадает, и можно спокойно менять блокчейн на Postgres без особой потери смысла. Короче говоря, в этой статье мы и расскажем об азах безопасного хранения приватных ключей на примере блокчейна Ethereum. Если для вас эта статья не несет ничего нового — супер, мы очень рады, что вы в нашем «клубе». И, кстати, теперь у вас есть куда отправлять всех криптонеофитов, чтобы они случайно не потеряли по глупости все свои эфирки. Содержание: 0. Do it yourself! 1. Вводная информация 1.1. Аккаунты 1.2. Кошельки 1.3. Контракты 1.4. Multisig-кошельки 2. Владение 2.1. Довольно безопасное 2.1.1. Ноутбук и операционная система 2.1.2. Ethereum-нода 2.1.2.1 Установка на Linux 2.1.2.2. Установка на macOS 2.1.3. Аккаунт 2.1.4. Собираем подписи в единое целое 2.1.4.1 Стандартный MultiSig wallet 2.1.4.2 MixBytes MultiSig 2.2. Чуть менее безопасное 2.3. Обычное 2.3.1 Ethereum Wallet 2.3.2 MEW Авторы: Алексей therealal Макеев Павел pkruglov Круглов Сергей BoogerWooger Прилуцкий 0. Do it yourself! Кому доверить владение и управление своими ценностями в блокчейне? Лучше всего — себе. В крайнем случае — человеку, которому вы можете доверить чемодан с деньгами эквивалентной ценности. Дальнейшее руководство предназначено для вас или ваших доверенных людей. Любой, даже кратковременный доступ к компьютерам/оборудованию, с которых будет происходить управление, возможен только для людей с соответствующим уровнем доверия. Почему это так? Текущая механика работы банков приучила нас, что, сколько бы пин-кодов и паролей от интернет-банка мы ни потеряли, мы всегда можем прийти в отделение банка, показать паспорт и снять деньги либо начать восстановление доступа. Даже если мошенники сняли с банковского счета деньги, с какой-то вероятностью операцию удастся оспорить. В мире блокчейна это не так — если совершена операция (например, перевода денег), ее защищает вся мощь криптографических технологий. Далее будет дана базовая вводная информация для понимания общей картины и, без деталей информационной безопасности, рекомендации по безопасному владению аккаунтами/контрактами в Ethereum. 1. Вводная информация 1.1. Аккаунты Базовая сущность, которой можно владеть в сети Ethereum, это аккаунт (в эфириум-терминах: external account) — пара из закрытого и открытого ключа. Закрытый ключ должен держаться в секрете, открытый (точнее, адрес, получаемый из него) можно свободно публиковать. «На» адрес могут перечисляться деньги (в сети Ethereum — ether, эфир). Чтобы обозначить принадлежность любых средств, контрактов, транзакций (отправителя транзакции), используется именно адрес (например, 0x36c9cc925dd58747044f52d0a57917df64555a3d ). Однако чтобы выполнить любое действие от имени адреса своего аккаунта, нужен закрытый (секретный) ключ. Именно безопасное хранение секретных ключей и является главной функцией любого криптокошелька. Кошельки дополнительно шифруют закрытый ключ паролем, который нужно вводить в ходе использования ключа для подписи транзакций, именно в этот момент криптокошелек использует секретный ключ для создания подписи к транзакции. Чтобы владеть аккаунтом необходимо точно понимать где и как хранится секретный ключ, соответствующий конкретному адресу. Если вы входите в личный кабинет биржи, и биржа сама за вас проводит транзакции (т.е. подписывает каждую из них секретным ключом), значит она знает секретный ключ. И этот адрес фактически принадлежит не вам, а бирже. В случае централизованных бирж зачастую у вас вообще нет секретных ключей от адресов, которые вы видите в интерфейсе биржи. В случае децентрализованных бирж вы подписываете транзакцию на своей машине, и секретный ключ никуда не передается. В этом случае вы контролируете свой аккаунт совершенно самостоятельно. Обычно аккаунты (адреса и управляющие ими секретные ключи) сохраняются в специальном файле, называемом keystore. Секретные ключи в нем зашифрованы при помощи пароля, который вы будете вводить каждый раз, когда вам надо будет подписать отправляемую в сеть транзакцию. Это означает, что даже если ваш файл скопируют, то без знания пароля будет очень трудно достать из него секретный ключ. Практически невозможно, если вы используете длинный и сложный пароль, и гораздо проще, если вы используете пароль типа "lena1984", которые перебирают атакующие. В любом случае, утечка этого файла — это серьезная проблема. Помимо пароля, который контролирует доступ к данным об аккаунте (расшифровывая секретный ключ в те моменты, когда он нужен), некоторые криптокошельки используют длинную цепочку слов, называемую seed. Зная seed, можно воссоздать тот самый секретный ключ. Seed — это информация, которая позволяет с нуля сгенерировать новый keystore-файл, и в нём задать пароль, который захочется. Этот keystore-файл будет использован для управления теми же самыми адресами, что и предыдущий. Так что храните seed очень надёжно, возможно даже в виде хорошо спрятанной твёрдой копии. Не используйте для seed осмысленные куски текста из литературы, например "moroz i solntse den chudesniy" — атакующие смогут перебрать эти тексты с большей эффективностью, чем случайный набор слов типа "shop ban trick track chrome bunny york". Итак, помните: seed — для полного воссоздания аккаунта с нуля; пароль — для расшифровывания сохраненного в keystore-файле секретного ключа, когда он требуется для подписания отправляемой в сеть транзакции. Большинство кошельков помогает вам сгенерировать надёжный seed. В случае веб-кошельков обычно генерация производится строго у вас в браузере, при помощи JavaScript (программа выполняется у вас на компьютере, внутри вашего браузера, и только ваш браузер видит сгенерированный seed). Но надо понимать, что, если на вашем компьютере работает программа-троян, или в вашем браузере стоит вредоносное расширение, ваш seed может быть украден. Ситуация, когда seed генерируется на стороне сервиса (т.е. он его может подсмотреть) вообще неприемлема. Даже если сервису можно доверять, сам сервис могут взломать. Аккаунты можно переносить между компьютерами в виде файлов, однако нужно знать, что «полностью» удалить файл с диска/флешки невозможно. При удалении с диска компьютер не удаляет все байты файла, а лишь помечает файл как удалённый, специальные программы могут такой файл восстановить. Если аккаунт имеет или будет иметь большую ценность, он не должен путешествовать по компьютерам и сетям. Все диски и флешки, которые применялись для его передачи, нужно либо физически уничтожить, либо использовать для резервного копирования аккаунта и хранить так же надежно, как и сам аккаунт. 1.2. Кошельки Программа, которая оперирует с аккаунтами, контрактами и прочими сущностями блокчейна, называется кошельком (wallet) или криптокошельком. Кошелек может содержать несколько аккаунтов и поддерживать одновременную работу с ними. Кошельки бывают в виде обычных программ, в виде отдельного устройства (аппаратные) или в виде web-сервиса. Программа-кошелёк не «хранит в себе биткоины» в виде каких-то данных, а хранит лишь ключи по управлению адресами и умеет общаться с блокчейном (формировать транзакции или искать информацию в блокчейне). 1.3. Контракты Контракты содержат логику, которая будет выполнена с математической точностью, причем большим количеством майнеров, большинство из которых заинтересованы в честном исполнении контракта. Результирующие изменения состояния контракта будут заверены криптографически и отправлены в общий блокчейн Ethereum, где их может увидеть любой участник. Владение контрактом прописывается в самом контракте (с использованием адресов владельцев, адресов их аккаунтов), т. е. оно является частью логики или состояния контракта. Если логика контракта требует транзакций от нескольких владельцев — ее называют мультиподписью (multi-signature, multisig). Именно на основе такой логики реализованы контракты multisig-кошельков. Мультиподпись не ограничивается защитой контрактов, хранящих эфир, ей можно защитить доступ к любому контракту. 1.4. Multisig-кошельки Не нужно путать их с программами-кошельками, описанными выше. Multisig-кошелек состоит из контракта с мультиподписью и графического интерфейса для более удобного взаимодействия с контрактом. В контракте прописаны параметры мультиподписи: владельцы (обычно это аккаунты); количество подписей для выполнения действий. Иногда снятие малых сумм (порог задается в контракте) требует подписи лишь одного владельца. Например, кошелек Ethereum Wallet (работает на базе графического движка Mist, поэтому иногда ошибочно называется Mist) позволяет и создать multisig-контракт кошелька, и удобно работать с ним. Программа-кошелек может управлять несколькими multisig-кошельками. Не путайте реализацию мультисиг кошельков в Ethereum и в Bitcoin. В отличие от Ethereum, в Bitcoin, чтобы воспользоваться биткоинами с заранее созданного multisig-адреса, все необходимые подписи нужно «собрать» заранее и упаковать в одну транзакцию, тогда как в Ethereum несколько транзакций от подписантов могут приходить независимо. 2. Владение Ниже описаны несколько способов с разным балансом безопасности, цены и удобства использования. Все сказанное далее — наша рекомендация. 2.1. Довольно безопасное Multisig-кошелек с несколькими подписями, аккаунты которых хранятся на разных ноутбуках. Для ценностей более 100 000 долларов нужен именно этот способ. Обязательных подписей — не менее двух. Всего подписей — на одну-две больше, чем обязательных (на случай утери/компрометации одной-двух подписей). Как вариант: всего подписей три, обязательных две (любых). 2.1.1. Ноутбук и операционная система Покупается у надежной компании, которая понятия не имеет, для чего будет использован ноутбук. Компания должна иметь околонулевой мотив встроить в ноутбук программные/аппаратные «закладки». Все ноутбуки приобрести у разных компаний. Железо должно быть надежное и иметь минимальную вероятность обычной поломки. В случае поломки/проблем — либо решаем сами, либо вынимаем все жесткие диски и отдаем в ремонт, после которого ноутбук НЕ используем для дальнейшего хранения аккаунтов. Операционная система: Linux либо macOS. Аппаратные требования: SSD (обязательно SSD!), диск 256+ Гб, оперативная память 16+ Гб, процессор уровня Intel Core i5 или лучше. Между ноутбуком и интернетом должен быть firewall, например на маршрутизаторе. Ноутбук должен быть чистым: не устанавливать никаких программ, кроме операционной системы и Ethereum-ноды, не подключать никаких сторонних флешек и дисков. Никаких инструментов удаленного управления! 2.1.2. Ethereum-нода Кошельки используют Ethereum-ноду для взаимодействия с блокчейном. Нужна так называемая полная Ethereum-нода. 2.1.2.1. Установка на Linux Скрытый текст Будем рассматривать установку на deb-совместимые дистрибутивы (Debian, Ubuntu, CentOS). Заходим на https://github.com/ethereum/mist/releases и скачиваем последний релиз, на момент написания статьи это был 0.9.3: Если у вас 64-битная система https://github.com/ethereum/mist/releases/download/v0.9.3/Ethereum-Wallet-linux64-0-9-3.deb Если вдруг 32-битная https://github.com/ethereum/mist/releases/download/v0.9.3/Ethereum-Wallet-linux32-0-9-3.deb После скачивания неплохо проверить целостность пакета, чтобы исключить подмену файла. Для этого на странице представлены SHA256-хеши всех файлов, например для Ethereum-Wallet-linux64-0-9-3.deb это 946b4b7dec1b6f2b58b6ef21d06a12dcee691fa2186baad7d99872f94240ced8 . В Linux вычислить хеш можно с помощью стандартной консольной утилиты sha256sum . В окне терминала вводим следующую команду: $ sha256sum ~ /Downloads/ Ethereum-Wallet-linux64- 0 - 9 - 2 .deb Где: $ — приглашение терминала, означающее, что команда будет выполнена от имени пользователя (вводить не нужно); ~ — путь до директории текущего пользователя; ~/Downloads/Ethereum-Wallet-linux64-0-9-2.deb — полный путь к файлу. В ответ нам должен отобразиться хеш, который приведен выше (для вашего файла может быть другой). Для установки пакета используем команду: $ sudo dpkg -i ~ /Downloads/ Ethereum-Wallet-linux64- 0 - 9 - 2 .deb Где: sudo — команда, позволяющая выполнить действие с правами root (администратора); dpkg — стандартная утилита для установки deb-пакета; -i — флаг установки пакета (install). После запуска команды необходимо ввести пароль пользователя. Другой способ установки: дважды кликаем на файл в графическом файл-менеджере и следуем указаниям. 2.1.2.2. Установка на macOS Скрытый текст Для установки используем ту же страницу https://github.com/ethereum/mist/releases , только нам потребуется файл с расширением *.dmg, на момент написания статьи это Ethereum-Wallet-macosx-0-9-3.dmg . После скачивания проверим хеш файла через терминал. Для запуска терминала в macOS нужно: Запустить Finder. Выбрать в меню Finder пункт «Переход», далее — «Служебные программы». Найти иконку «Терминал» и запустить. В терминале ввести команду: $ shasum -a 256 ~ /Downloads/ Ethereum-Wallet-macosx- 0 - 9 - 2 .dmg Далее дважды кликаем на dmg-файл и устанавливаем кошелек. 2.1.2.3. Синхронизация ноды Перед какими-либо действиями в блокчейне следует полностью синхронизировать Ethereum-ноду (дождаться, пока все индикаторы синхронизации, подобные нижеприведенному, закончат работу и исчезнут). Со временем блокчейн будет «распухать». Чтобы его сжать (либо если с последней синхронизации прошло много времени), можно полностью удалить блокчейн (только блокчейн! Не аккаунт), тогда будет выполнена быстрая синхронизация. Данные блокчейна находятся в директории chaindata , которую можно найти: в ~/.ethereum/geth/ на Linux; в ~/Library/Ethereum/geth/ на macOS. Для удаления данных блокчейна, следовательно, можно просто удалить директорию chaindata . Лучше всего закрыть кошелек, переименовать chaindata в chaindata.old, запустить кошелек (должна начаться синхронизация с нуля и основной интерфейс по-умолчанию не появится — поэтому нажимаем Launch Application), убедиться, что аккаунты на месте (если нет — переименовали что-то не то, ищем их в переименованном каталоге), после чего можно удалять chaindata.old. 2.1.3. Аккаунт При первом старте Ethereum Wallet следуйте указаниям: На этом шаге придумайте сложный пароль для вашего будущего кошелька. После этого аккаунт будет создан. Для подстраховки от поломки жесткого диска сделать резервную копию аккаунта на флешку, хранить вместе с ноутбуком. Даже неработающий жесткий диск, на котором был аккаунт, следует физически уничтожить. Для резервного копирования аккаунта нужно скопировать файл с ключами, расположенный по адресу: в Linux: ~/.ethereum/keystore в macOS: ~/Library/Ethereum/keystore Эти же директории можно открыть в Ethereum Wallet через верхнее меню File -> Backup -> Accounts . 2.1.4. Собираем подписи в единое целое Здесь есть два подварианта. Стандартный MultiSig Wallet подойдет, если актив, которым вы владеете, — это эфир или ERC-20 токены, и он перечисляется вам на адрес (т. е. для получения не требуется дополнительных действий с вашей стороны). Для защиты любого контракта мультиподписью мы разработали свое решение на основе стандартного. Какой из подвариантов выбрать — зависит от того, что нужно защитить. 2.1.4.1. Стандартный MultiSig wallet Для создания мультисига вам необходимо сделать две вещи: скопировать публичные адреса других созданных аккаунтов на текущий ноутбук; иметь на основном кошельке эфир (порядка 0.2 или более) для отправки транзакций. Как только условия выполнены, можно приступать к созданию. В разделе Wallet Contracts нажмите на ADD WALLET CONTRACT . Введите имя контракта и выберите опцию Multisignature Wallet Contract. Вы увидите следующее сообщение: This is a joint account controlled by X owners. You can send up to X ether per day. Any transaction over that daily limit requires the confirmation of X owners. На этом этапе вам нужно выбрать, сколько владельцев будет у кошелька-контракта и сколько подписей необходимо для совершения транзакции сверх суточного лимита. Далее нужно вставить адреса всех аккаунтов-владельцев (те, что мы создавали ранее на разных ноутбуках) и нажать CREATE . Для добавления существующего мультисиг-кошелька на другом компьютере (например, если ноутбук понадобилось заменить или переустановить кошелек) вам необходимо сделать импорт уже существующего кошелька. Действия выполняются в главном окне Ethereum Wallet: На вкладке WALLETS прокрутите вниз до раздела Wallet Contracts и нажмите кнопку ADD WALLET CONTRACT . Впишите удобное имя кошелька. Выберите IMPORT WALLET . Введите адрес кошелька. Если один из ваших существующих аккаунтов является владельцем кошелька, появится зеленая надпись, подтверждающая это. Нажмите кнопку CREATE . Для перевода средств с мультисиг-кошелька вам, как обычно, нужно перейти на вкладку SEND, выбрать адрес мультисиг-кошелька, с которого будете переводить, ввести сумму и пароль для создания транзакции. Однако после ввода пароля вы увидите различия с обычной транзакцией: Здесь вам нужно одобрить транзакцию кнопкой APPROVE . Такое же сообщение будет выведено на компьютере другого владельца: И только после того как минимально необходимое число владельцев одобрят транзакцию, средства будут переведены. 2.1.4.2. MixBytes MultiSig Для посылки транзакции в любой контракт, защищенный MixBytes MultiSig, следует выполнить те же действия по отсылке транзакции, как для обычного контракта, но повторить их с нескольких управляющих ноутбуков. Со стольких, сколько минимально подписей требуется. При этом первые запросы лишь зафиксируют факт подписи, а действие выполнит последняя подпись. Опишем, как посылать транзакции в контракт. Контрактами можно управлять в Ethereum Wallet, в шапке есть вкладка Contracts, переходим в нее: Здесь можно добавить существующий контракт — нажимаем WATCH CONTRACT . В появившейся форме нужно ввести адрес контракта, его имя (выберите любое — оно остается только в вашем кошельке), а также так называемый ABI (application binary interface, представленный большим JSON-текстом): ABI должен предоставить разработчик контракта. Или же можно попробовать найти ABI на сервисе etherscan.io по адресу контракта во вкладке Contract Source (только для верифицированных контрактов): Если все успешно, контракт появится на странице контрактов в кошельке. Заходим в него: Слева можно посмотреть данные состояния контракта, а справа — выбрать функцию для посыла транзакции (Select function): нажимаем Pick A Function , выбираем нужную функцию, появляется форма, где нужно заполнить параметры вызова: Когда нужные параметры заполнены, выбираем, от имени какого аккаунта выполнить транзакцию (Execute from), нажимаем EXECUTE (потребуется ввести пароль от аккаунта). После этого транзакция уйдет в сеть и достигнет контракта. Напоминаем, для работы MixBytes MultiSig потребуется проделать аналогичную процедуру на двух или более ноутбуках (в зависимости от минимально необходимого числа подписей). Отправлять подписи сверх необходимых не нужно. 2.2. Чуть менее безопасное Это аппаратные кошельки. Представляют собой физическое устройство, из которого невозможно извлечь (а следовательно, и украсть) приватный ключ. А для подтверждения транзакции необходимо нажать на физическую кнопку на устройстве. Таким образом, если хакер получит удаленный доступ к вашему компьютеру, к которому в это время будет подключен аппаратный кошелек, злоумышленник все равно не сможет физически нажать на кнопку и перевести себе деньги. Рассмотрим на примере Ledger Nano S. При первом подключении устройства к компьютеру вам необходимо инициализировать устройство, в это входит: Установка 8-значного PIN-кода. Код будет спрашиваться при каждом подключении устройства к компьютеру, а также при выходе из спящего режима. Запись фразы восстановления (seed) из 24 слов. Это узкое место, и здесь остановимся подробнее. Если кто-то получит доступ к фразе — можете попрощаться с активами. Поэтому надо обязательно озаботиться ее хранением в безопасном месте. Запишите на бумажку и спрячьте. Плюс к этому рекомендуем хранить ее в двух разных местах — по сути, сделать резервную копию на случай утери. Существует много способов безопасно хранить фразу и в цифровом виде — хранение по частям, стеганография и т. д. Ограничено лишь вашей фантазией. Видеоинструкция по инициализации В этом аппаратном кошельке можно хранить разные валюты, их число уже приближается к двадцати и постоянно обновляется. Для доступа к отдельным кошелькам используются приложения Chrome, таким образом решена проблема доступа на разных ОС. 2.3. Обычное Здесь есть много подвариантов. Рассмотрим два. 2.3.1. Ethereum Wallet О том, как работать с отдельными аккаунтами, рассказано в первом решении («Довольно безопасное», не доходя до раздела «Собираем подписи в единое целое») — это отдельный чистый ноутбук и Ethereum Wallet на нем. 2.3.2. MEW Наверное, самый популярный кошелек для Ethereum на данный момент, потому что простой. Заходим на сайт https://myetherwallet.com/ , выбираем файл с ключом, вводим пароль и уже можем осуществлять транзакции. Без поднятия ноды, скачивания блокчейна и т. д. Сами ключи не уходят на сайт, после загрузки в браузере приложение работает автономно. Но есть риск того, что сайт подменят. Можем подстраховаться от этого: просто скачать сайт себе на компьютер и открывать его локально, исходный код доступен на Гитхабе . Скачиваем архив с последней версией (на момент написания это был архив etherwallet-v3.21.15.zip ), разархивируем и просто открываем index.html . Получаем тот же MEW, но локально. Нужно помнить: несмотря на то что MEW не хранит ваши секретные ключи, взлом вашего компьютера или браузера позволит узнать секретные ключи в тот момент, когда вы их введете.]]></text></doc>