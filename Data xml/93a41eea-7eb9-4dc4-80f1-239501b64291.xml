<doc><category auto="true" type="str" verify="true"><![CDATA[Информационная безопасность]]></category><author auto="true" type="str" verify="true"><![CDATA[DrMefistO]]></author><title auto="true" type="str" verify="true"><![CDATA[Низкоуровневый взлом банкоматов NCR]]></title><keywords auto="true" type="list" verify="true"><item type="str"><![CDATA[Информационная безопасность]]></item><item type="str"><![CDATA[Assembler]]></item><item type="str"><![CDATA[Блог компании Positive Technologies]]></item><item type="str"><![CDATA[Реверс-инжиниринг]]></item></keywords><text auto="true" type="str" verify="true"><![CDATA[ Изображение: Sascha Kohlmann , CC BY-SA 2.0 Существуют системы, доступа к которым у простых смертных нет по умолчанию. И разработчики таких систем наивно полагают, что они защищены от проникновения и зорких глаз исследователей. Взять хотя бы банкоматы (АТМ). Нередки случаи, когда к АТМ подходят неизвестные, подключают ноутбук, забирают деньги и уходят, не оставляя каких-либо логов в системе. А недавние истории с « котлетами » (вредоносное ПО под названием Cutlet Maker ) и подавно подтверждают, что неуязвимых систем нет — есть недоисследованные. Начало исследования Бытует мнение, что единственный способ украсть деньги из банкомата — это приехать на самосвале, подцепиться к банкомату крюком и выдрать его с потрохами, а потом использовать болгарку, лом и газосварочный аппарат. Но есть и другой метод. После непродолжительных поисков на Ebay у меня на столе оказалась платка диспенсера NCR USB S1 Dispenser с прошивкой. Цели были такие: найти обход шифрования команд, которые посылает компьютер по USB самому диспенсеру, в частности на выдачу банкнот; узнать, как обойти необходимость физического доступа в сейф для проведения аутентификации (передергивания кассеты) для генерации ключей шифрования команд из предыдущего пункта. Прошивка Прошивка представляет из себя ELF -файл под процессор NXP ColdFire ( Motorola 68040 , мой любимый процессор), работающий на VxWorks v5.5.1 . В ELF -файле интерес представляют две основные секции — .text и .data : В одной из них содержится код, который крутится все основное время (назовем его основной прошивкой), когда диспенсер подключен к системнику в верхней части АТМ. Во второй лежит упакованный с помощью zlib код загрузчика (его местное название USB Secure Bootloader ), который отвечает за заливку прошивки и запуск основного кода. И самое приятное то, что в файлике остались невырезанными символы — бери да ищи что-нибудь интересное. Внутреннее устройство основной прошивки Если разделять код на основные составляющие, то получится такая схема (в порядке подчинения): Поток, который занимается получением USB-пакетов и распределением их по сервисам. Сервисы — основные исполняющие единицы, каждому из них отведена своя роль и у каждого есть свои задачи (классы). Классы — здесь это задачи, которые может выполнять тот или иной сервис с помощью контроллеров. Контроллеры — собственно « воркеры » ( workers ), которые занимаются валидацией присланных им задач, их выполнением, а также формированием ответных пакетов. Так как кода в прошивке много, было решено начать с поиска всех возможных сервисов, а дальше уже смотреть, куда передаются задачи. В итоге нашлись следующие сервисы, которые как раз должны выполнять то, что я ищу: 1) DispTranService (Dispenser Transaction Service) : работа с шифрованными командами, формирование пачек банкнот, аутентификация. Можно сказать, самое интересное — здесь. 2) securityService : после аутентификации на стороне диспенсера генерируется сессионный ключ, который по запросу компьютера отправляется на него в зашифрованном виде. Этим ключом будут шифроваться все важные команды — выдача, формирование пачки банкнот. Впоследствии на глаза попался еще один сервис: UsbDownloadService . Его задача – при подключении диспенсера к компьютеру и несоответствии версии прошивки диспенсера той, что хранится на компьютере банкомата, переходить в bootloader с целью заливки прошивки, с которой должна работать ОС (лежит в папке с ПО вендора на компьютере). Этот сервис также умеет отдавать информацию о версии прошивки. Физическая аутентификация Физическая аутентификация реализована на высочайшем уровне и защищает АТМ от простой отправки по USB команд на выдачу без авторизации. В данном случае она заключается в том, что только при открытом сейфе с деньгами нужно выполнить одно из следующих действий: вынуть и вставить нижнюю кассету, переключить тумблер на задней стенке стойки с диспенсером. Но все это требуется только если уровень доступа установлен на максимальный, то есть физический. Всего их три: USB (0), логический (1) и физический (2). Остальные два используются сервисниками и разработчиками для отладки и тестирования прошивки. Ну а физический — крайне рекомендуется вендором к использованию по умолчанию. Уязвимость Далее описана критическая уязвимость (уже исправленная вендором на момент публикации статьи), которая позволяла при наличии доступа в сервисную зону, но без доступа в сейф (например, через проделанное в лицевой панели ATM отверстие) выполнять любые команды диспенсера, включая выдачу наличных. Как выяснилось, UsbDownloadService принимает команды, не требующие шифрования. Звучит заманчиво. Но вдруг дальше все защищено, и название Secure Bootloader оправдает себя? (Спойлер: не оправдает!) We need to go deeper Как уже было сказано, в секции .data лежит упакованный код загрузчика, который долгое время не вызывал у меня интереса, да и коллеги, когда исследовали прошивку, не обратили на него внимание. Пока наличие загрузчика было тайной, оставался открытым вопрос: как же все-таки ПО на компьютере заливает прошивку? Ведь в основной прошивке ничего такого обнаружить не удалось. Итак, bootloader распакован, загружен в IDA по смещению 0x100000 — теперь можно исследовать… Только символов нет! Не беда: сравнение основной прошивки с кодом загрузчика, чтение datasheet контроллера — и начинает вырисовываться определенная картина. Выяснилось, что заливка прошивки хоть и выглядит защищенной, таковой на деле не является. Всего-то нужно знать, как заливать ее правильно. На полное понимание этого процесса было потрачено довольно много усилий и времени (подробнее об этом можно узнать из доклада « Blackbox is dead—Long live Blackbox! » на конференции Black Hat 2018 в Лас-Вегасе). Чего только стоит перепайка памяти NVRAM, заливка в нее бэкапа с целью «раскирпичивания» всего контроллера… Спасибо коллеге Алексею за терпение! В итоге получился следующий алгоритм заливки прошивки в диспенсер: 1) Сгенерировать пару RSA-ключей и залить публичный ключ в контроллер. 2) Записать последовательно секции .data и .text из ELF по их физическим адресам из заголовков секций. 3) Подсчитать SHA-1 от записанных данных, зашифровать хеш приватным ключом, отправить в контроллер. 4) Подсчитать и отправить сумму всех записанных word-ов прошивки. После чего, если все подсчитано и записано успешно, загрузится основная прошивка. Выяснилось, что при записи прошивки существует только одно ограничение: версия прошивки должна быть не ниже текущей. Но ведь никто не мешает нам подменить версию прошивки в самих ее данных. В итоге моя особая прошивка с antisecurity -фиксами была залита и успешно запущена! К этому моменту код основной прошивки был хорошо изучен, найдены команды на выдачу банкнот. Теперь их можно посылать незашифрованными, и диспенсер их с радостью выполнит. Выдача После всего пережитого во время исследования (например, « закирпиченый » реальный банкомат), результат был таким приятным и компенсирующим усилия, что алгоритм захотелось повторить и с другим крупным вендором. Самый что ни на есть настоящий банкомат начал натужно жужжать и охотно поделился с нами свежими хрустящими банкнотами (в данном случае вендорскими «фантиками»). Никакой магии не применялось: только ноутбук, мозг и USB-шнурок. Выводы Мы в очередной раз убедились, что, руководствуясь принципом security through obscurity , обеспечить надлежащую защиту невозможно. Проприетарность кода или прошивки совершенно не означает, что к ней в один прекрасный момент не получит доступ злоумышленник и не воспользуется найденными уязвимостями. Всем необходимым для реализации корыстных целей можно обзавестись при наличии определенной суммы денег. Разработчики должны заниматься кодом, а безопасники — его защитой. Именно поэтому наиболее продуктивным подходом видится сотрудничество с ИБ-компаниями с достаточным опытом в обеспечении безопасности различных систем, которые помогут построить адекватную защиту в каждом конкретном случае. P.S. Вендор подтвердил уязвимость (брешь также обнаружена и в другой модели — S2 ), которая была заявлена как исправленная в февральском фиксе 2018-го года. Список CVE: CVE-2017-17668 (NCR S1 Dispenser), CVE-2018-5717 (NCR S2 Dispenser). Благодарности До меня над прошивкой (правда без платы диспенсера) уже работали мои коллеги — Дима Скляров и Миша Цветков . Их наработки мне очень помогли в исследовании, за что им огромное спасибо! По части «железа» мне очень помог Алексей Стенников .]]></text></doc>